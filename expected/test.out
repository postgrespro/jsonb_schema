create extension jsonb_schema;
create table foo(obj jsonb);
-- two schema are equal
insert into foo values (jsonb_pack('{"a": {"b":{"c": "foo"}}, "arr":[1,2,3]}'::jsonb));
insert into foo values (jsonb_pack('{"a": {"b":{"c": "fas"}}, "arr":[1,2,3,5,6]}'::jsonb));
-- tuple
insert into foo values (jsonb_pack('{"tup": [1, {"a":1,"b":2}, "str"]}'::jsonb));
insert into foo values (jsonb_pack('{"tup": [1, {"a":2,"b":3}, "str"]}'::jsonb));
insert into foo values (jsonb_pack('[1, {"a":4,"b":5}, 2]'::jsonb));
insert into foo values (jsonb_pack('[1, 2, "str"]'::jsonb));
-- raw scalar
insert into foo values (jsonb_pack('[1]'::jsonb));
insert into foo values (jsonb_pack('["str"]'::jsonb));
select jsonb_unpack(obj) from foo;
                    jsonb_unpack                    
----------------------------------------------------
 {"a": {"b": {"c": "foo"}}, "arr": [1, 2, 3]}
 {"a": {"b": {"c": "fas"}}, "arr": [1, 2, 3, 5, 6]}
 {"tup": [1, {"a": 1, "b": 2}, "str"]}
 {"tup": [1, {"a": 2, "b": 3}, "str"]}
 [1, {"a": 4, "b": 5}, 2]
 [1, 2, "str"]
 [1]
 ["str"]
(8 rows)

select * from foo;
                                        obj                                         
------------------------------------------------------------------------------------
 [1, "\u0003foo\u0003\u00021\\000\u00022\\000\u00023\\000"]
 [1, "\u0003fas\u0005\u00021\\000\u00022\\000\u00023\\000\u00025\\000\u00026\\000"]
 [3, "\u0003\u00021\\000\u00021\\000\u00022\\000\u0003str"]
 [3, "\u0003\u00021\\000\u00022\\000\u00023\\000\u0003str"]
 [5, "\u0003\u00021\\000\u00024\\000\u00025\\000\u00022\\000"]
 [6, "\u0003\u00021\\000\u00022\\000\u0003str"]
 [7, "\u0001\u00021\\000"]
 [8, "\u0001\u0003str"]
(8 rows)

select * from jsonb_schemes;
 id |                     schema                     
----+------------------------------------------------
  1 | \x01016101016201016302000700070361727206030007
  3 | \x0103747570050301016103016203000702070007
  5 | \x05030101610301620300070307
  6 | \x0503030207
  7 | \x0603
  8 | \x0602
(6 rows)

