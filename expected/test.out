create extension jsonb_schema;
create table foo(obj jsonb);
-- two schema are equal
insert into foo values (jsonb_pack('{"a": {"b":{"c": "foo"}}, "arr":[1,2,3]}'::jsonb));
insert into foo values (jsonb_pack('{"a": {"b":{"c": "fas"}}, "arr":[1,2,3,5,6]}'::jsonb));
-- tuple
insert into foo values (jsonb_pack('{"tup": [1, {"a":1,"b":2}, "str"]}'::jsonb));
insert into foo values (jsonb_pack('{"tup": [1, {"a":2,"b":3}, "str"]}'::jsonb));
insert into foo values (jsonb_pack('[1, {"a":4,"b":5}, 2]'::jsonb));
insert into foo values (jsonb_pack('[1, 2, "str"]'::jsonb));
-- raw scalar
insert into foo values (jsonb_pack('[1]'::jsonb));
insert into foo values (jsonb_pack('["str"]'::jsonb));
select jsonb_unpack(obj) from foo;
                    jsonb_unpack                    
----------------------------------------------------
 {"a": {"b": {"c": "foo"}}, "arr": [1, 2, 3]}
 {"a": {"b": {"c": "fas"}}, "arr": [1, 2, 3, 5, 6]}
 {"tup": [1, {"a": 1, "b": 2}, "str"]}
 {"tup": [1, {"a": 2, "b": 3}, "str"]}
 [1, {"a": 4, "b": 5}, 2]
 [1, 2, "str"]
 [1]
 ["str"]
(8 rows)

select * from foo;
                        obj                         
----------------------------------------------------
 [1, "\\x03666f6f03023100023200023300"]
 [1, "\\x0366617305023100023200023300023500023600"]
 [3, "\\x0302310002310002320003737472"]
 [3, "\\x0302310002320002330003737472"]
 [5, "\\x03023100023400023500023200"]
 [6, "\\x0302310002320003737472"]
 [7, "\\x01023100"]
 [8, "\\x0103737472"]
(8 rows)

select * from jsonb_schemes;
 id |                     schema                     
----+------------------------------------------------
  1 | \x03016103016203016305000000000361727202060000
  3 | \x0303747570010603016106016206000005000000
  5 | \x01060301610601620600000600
  6 | \x0106060500
  7 | \x0206
  8 | \x0205
(6 rows)

